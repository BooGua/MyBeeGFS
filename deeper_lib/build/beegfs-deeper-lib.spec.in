%define buildarch %BUILDARCH%
%define BEEGFS_COMMON_PATH %BEEGFS_COMMON_PATH%
%define BEEGFS_COMMON_PACKAGE_PATH %BEEGFS_COMMON_PACKAGE_PATH%
%define BEEGFS_OPENTK_PATH %BEEGFS_OPENTK_PATH%
%define BEEGFS_THIRDPARTY_PATH %BEEGFS_THIRDPARTY_PATH%
%define BEEGFS_DEEPER_CACHED_PATH %BEEGFS_DEEPER_CACHED_PATH%
%define BEEGFS_DEEPER_COMMON_PATH %BEEGFS_DEEPER_COMMON_PATH%

%define BEEGFS_VERSION %VER%-%RELEASE_STR%
%define MAKE_CONCURRENCY %MAKE_CONCURRENCY%
%define NEED_DEBUG_DEFINE %NEED_DEBUG_DEFINE%
%define BEEGFS_VERSION %BEEGFS_VERSION%
%define VER %(echo '%{BEEGFS_VERSION}' | cut -d - -f 1)
%define BEEGFS_RELEASE_STR %(echo '%{BEEGFS_VERSION}-' | cut -d - -f 2)
%define EPOCH %(echo '%{VER}' | cut -d . -f 1)

%define is_fedora %(test -e /etc/fedora-release && echo 1 || echo 0)
%define is_redhat %(test -e /etc/redhat-release && echo 1 || echo 0)
%define is_suse %(test -e /etc/SuSE-release && echo 1 || echo 0)
%define is_mandrake %(test -e /etc/mandrake-release && echo 1 || echo 0)

%if %is_mandrake
%define disttag mdk
%endif

%if %is_suse
%define disttag suse
%define distver %(relpackage="`rpm -qf /etc/SuSE-release`"; release="`rpm -q --queryformat='%{VERSION}' $relpackage 2> /dev/null | tr . : | sed s/:.*$//g`" ; if test $? != 0 ; then release="" ; fi ; echo "$release")
%endif

%if %is_fedora
%define disttag fc
%endif

%if %is_redhat
%define disttag el
%define distver %(relpackage="`rpm -qf /etc/redhat-release`"; release="`rpm -q --queryformat='%{VERSION}' $relpackage 2> /dev/null | tr . : | sed s/:.*$//g`" ; if test $? != 0 ; then release="" ; fi ; echo "$release")
%endif

%if %{defined disttag}
%define RELEASE %{BEEGFS_RELEASE_STR}%{disttag}%{distver}
%else
%define RELEASE %{BEEGFS_RELEASE_STR}generic
%endif

Summary: BeeGFS DEEP-ER cache library
Name: %NAME%
Version: %{VER}
Release: %{RELEASE}
License: BeeGFS EULA
Group: Software/Other
Source: %NAME%-%{BEEGFS_VERSION}.tgz
URL: http://www.beegfs.com
Vendor: Fraunhofer ITWM
BuildRoot: %{_tmppath}/%NAME%-root
BuildArch: %{buildarch}
Requires: zlib
Epoch: %{EPOCH}

%description
The package contains the BeeGFS DEEP-ER library and the DEEP-ER cache daemon.

%if %{NEED_DEBUG_DEFINE}
%debug_package
%endif

%clean
rm -rf %{buildroot}

%prep
%setup -c

%build
cd build

# build deeper-cache lib
make root-dir=%{ROOT_DIR} \
	BEEGFS_VERSION=%{BEEGFS_VERSION} \
	BEEGFS_COMMON_PATH=%{BEEGFS_COMMON_PATH} \
	BEEGFS_OPENTK_PATH=%{BEEGFS_OPENTK_PATH} \
	BEEGFS_THIRDPARTY_PATH=%{BEEGFS_THIRDPARTY_PATH} \
	BEEGFS_DEEPER_COMMON_PATH=%{BEEGFS_DEEPER_COMMON_PATH} \
	BEEGFS_DEEPER_CACHED_PATH=%{BEEGFS_DEEPER_CACHED_PATH} \
	-j%{MAKE_CONCURRENCY} \
	package_lib

%install
# add init script and add the genric part of the init script from the common package
install -D %{BEEGFS_DEEPER_CACHED_PATH}/build/dist/etc/init.d/%NAME_DAEMON%.init \
	${RPM_BUILD_ROOT}/etc/init.d/%NAME_DAEMON%
GENERIC_INITSCRIPT=%{BEEGFS_COMMON_PACKAGE_PATH}/build/dist/etc/init.d/beegfs-service.init
cat $GENERIC_INITSCRIPT >> ${RPM_BUILD_ROOT}/etc/init.d/%NAME_DAEMON%

#install systemd unit description
install -D -m644 %{BEEGFS_DEEPER_CACHED_PATH}/build/dist/usr/lib/systemd/system/%NAME_DAEMON%.service \
	${RPM_BUILD_ROOT}/usr/lib/systemd/system/%NAME_DAEMON%.service

#add helper scripts for deeper-cached
COMMON_SCRIPT_PATH=%{BEEGFS_COMMON_PACKAGE_PATH}/scripts/etc/beegfs/lib
install -D -m644 ${COMMON_SCRIPT_PATH}/start-stop-functions \
	${RPM_BUILD_ROOT}/etc/beegfs/lib/start-stop-functions.%NAME_DAEMON%
install -D -m644 ${COMMON_SCRIPT_PATH}/init-multi-mode \
	${RPM_BUILD_ROOT}/etc/beegfs/lib/init-multi-mode.%NAME_DAEMON%

#add shared lib and daemon binary
install -D build/libbeegfs-deeper.so ${RPM_BUILD_ROOT}/opt/beegfs/lib/libbeegfs-deeper.so
install -D %{BEEGFS_DEEPER_CACHED_PATH}/build/%NAME_DAEMON% \
	${RPM_BUILD_ROOT}/opt/beegfs/sbin/%NAME_DAEMON%

#add configuration files for lib and daemon
install -D build/dist/etc/beegfs/%NAME%.conf ${RPM_BUILD_ROOT}/etc/beegfs/
install -D %{BEEGFS_DEEPER_CACHED_PATH}/build/dist/etc/default/%NAME_DAEMON% \
	${RPM_BUILD_ROOT}/etc/default/%NAME_DAEMON%
install -D build/dist/etc/ld.so.conf.d/beegfs-deeper.conf.in \
	${RPM_BUILD_ROOT}/etc/ld.so.conf.d/beegfs-deeper.conf

# add include file and code example
install -D include/deeper/deeper_cache.h ${RPM_BUILD_ROOT}/usr/include/deeper/deeper_cache.h
install -D build/dist/usr/share/doc/%NAME%/examples/beegfs-deeper-lib-example.cpp \
	${RPM_BUILD_ROOT}/usr/share/doc/%NAME%/examples/beegfs-deeper-lib-example.cpp

# create symlinks for lib to default lib location and and symlink for daemon configuration file
mkdir -p ${RPM_BUILD_ROOT}/usr/lib/
ln -s /opt/beegfs/lib/libbeegfs-deeper.so ${RPM_BUILD_ROOT}/usr/lib/libbeegfs-deeper.so
ln -s /etc/beegfs/%NAME%.conf ${RPM_BUILD_ROOT}/etc/beegfs/%NAME_DAEMON%.conf

pushd ${RPM_BUILD_ROOT}/opt/beegfs/lib/
chmod +x *.so
popd


%post
if [ "$1" = 1 ]
then
	output=$(systemctl is-system-running 2> /dev/null)
	if [ "$?" == 127 ]
	then
		chkconfig %NAME_DAEMON% on
	elif [ "$?" == 0 ] || ( [ "$output" != "offline" ] && [ "$output" != "unknown" ] )
	then
		systemctl enable %NAME_DAEMON%.service
	else
		chkconfig %NAME_DAEMON% on
	fi
fi
ldconfig

%preun
if [ "$1" = 0 ]
then
	output=$(systemctl is-system-running 2> /dev/null)
	if [ "$?" == 127 ]
	then
		chkconfig %NAME_DAEMON% off
	elif [ "$?" == 0 ] || ( [ "$output" != "offline" ] && [ "$output" != "unknown" ] )
	then
		systemctl disable %NAME_DAEMON%.service
	else
		chkconfig %NAME_DAEMON% off
	fi
fi
ldconfig


%files
%defattr(-,root,root)
%config(noreplace) /etc/beegfs/%NAME%.conf
%config(noreplace) /etc/beegfs/%NAME_DAEMON%.conf
%config(noreplace) /etc/default/%NAME_DAEMON%
/etc/beegfs/lib/start-stop-functions.%NAME_DAEMON%
/etc/beegfs/lib/init-multi-mode.%NAME_DAEMON%
/etc/init.d/%NAME_DAEMON%
/etc/ld.so.conf.d/beegfs-deeper.conf
/opt/beegfs/lib/libbeegfs-deeper.so
/opt/beegfs/sbin/%NAME_DAEMON%
/usr/lib/libbeegfs-deeper.so
/usr/lib/systemd/system/%NAME_DAEMON%.service
/usr/include/deeper/deeper_cache.h
/usr/share/doc/%NAME%/examples/beegfs-deeper-lib-example.cpp
